// Generated by CoffeeScript 1.9.0
(function() {
  var app, config, express, http, indexCtrl, io, nconf, socketToUser, sockets, users;

  express = require('express');

  app = express();

  http = require('http').Server(app);

  io = require('socket.io')(http);

  nconf = require('nconf');

  config = nconf.file({
    file: 'config.json'
  });

  indexCtrl = require('./controllers/index.coffee');

  app.set('view engine', 'jade');

  app.set('views', __dirname + '/views');

  app.use(express["static"](__dirname + '/public'));

  app.get('/', function(req, res) {
    return indexCtrl.view(req, res);
  });

  users = {};

  sockets = {};

  socketToUser = {};

  io.on('connection', function(socket) {
    console.log('a user connected');
    sockets[socket.id] = socket;
    return socket.on('disconnect', function() {
      var nick;
      delete sockets[socket.id];
      if (socketToUser[socket.id]) {
        nick = socketToUser[socket.id];
        delete users[nick];
        delete socketToUser[socket.id];
        return io.emit('user.leave', nick);
      }
    }).on('login', function(nick) {
      var data;
      if ((nick == null) || nick === '') {
        socket.emit('login.error', 'Недопустимый ник');
      }
      if (users[nick]) {
        return socket.emit('login.error', nick + " уже тут");
      } else {
        users[nick] = socket;
        socketToUser[socket.id] = nick;
        socket.emit('login.ok');
        data = {
          nick: nick,
          users: Object.getOwnPropertyNames(users)
        };
        return io.emit('user.join', JSON.stringify(data));
      }
    }).on('changeNick', function(nick) {
      var data, oldNick;
      oldNick = socketToUser[socket.id];
      if (oldNick != null) {
        socketToUser[socket.id] = nick;
        users[nick] = socket;
        delete users[oldNick];
      } else {
        socketToUser[socket.id] = nick;
        users[nick] = socket;
      }
      data = {
        oldNick: oldNick,
        newNick: nick
      };
      return io.emit('user.changeNick', JSON.stringify(data));
    });
  });

  http.listen(config.get('server:port'), function() {
    return console.log("listening on *:" + (config.get('server:port')));
  });

}).call(this);

//# sourceMappingURL=app.js.map
